// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: document.sql

package db

import (
	"context"
)

const createDocument = `-- name: CreateDocument :one
INSERT INTO document (
  username,
  is_private,
  has_summary,
  file_name
) VALUES (
  $1, $2, $3, $4
) RETURNING id, username, is_private, has_summary, file_name, created_at
`

type CreateDocumentParams struct {
	Username   string `json:"username"`
	IsPrivate  bool   `json:"is_private"`
	HasSummary bool   `json:"has_summary"`
	FileName   string `json:"file_name"`
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) (Document, error) {
	row := q.db.QueryRowContext(ctx, createDocument,
		arg.Username,
		arg.IsPrivate,
		arg.HasSummary,
		arg.FileName,
	)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.IsPrivate,
		&i.HasSummary,
		&i.FileName,
		&i.CreatedAt,
	)
	return i, err
}

const getAllDocumentsByUser = `-- name: GetAllDocumentsByUser :many
SELECT id, username, is_private, has_summary, file_name, created_at FROM document
WHERE username = $1
`

func (q *Queries) GetAllDocumentsByUser(ctx context.Context, username string) ([]Document, error) {
	rows, err := q.db.QueryContext(ctx, getAllDocumentsByUser, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Document{}
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.IsPrivate,
			&i.HasSummary,
			&i.FileName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllNonPrivateDocuments = `-- name: GetAllNonPrivateDocuments :many
SELECT id, username, is_private, has_summary, file_name, created_at FROM document
WHERE private = false
`

func (q *Queries) GetAllNonPrivateDocuments(ctx context.Context) ([]Document, error) {
	rows, err := q.db.QueryContext(ctx, getAllNonPrivateDocuments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Document{}
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.IsPrivate,
			&i.HasSummary,
			&i.FileName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDocument = `-- name: GetDocument :one
SELECT id, username, is_private, has_summary, file_name, created_at FROM document
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDocument(ctx context.Context, id int64) (Document, error) {
	row := q.db.QueryRowContext(ctx, getDocument, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.IsPrivate,
		&i.HasSummary,
		&i.FileName,
		&i.CreatedAt,
	)
	return i, err
}

const updatePrivateDocument = `-- name: UpdatePrivateDocument :one
UPDATE document SET has_summary = $2 WHERE id = $1 RETURNING id, username, is_private, has_summary, file_name, created_at
`

type UpdatePrivateDocumentParams struct {
	ID         int64 `json:"id"`
	HasSummary bool  `json:"has_summary"`
}

func (q *Queries) UpdatePrivateDocument(ctx context.Context, arg UpdatePrivateDocumentParams) (Document, error) {
	row := q.db.QueryRowContext(ctx, updatePrivateDocument, arg.ID, arg.HasSummary)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.IsPrivate,
		&i.HasSummary,
		&i.FileName,
		&i.CreatedAt,
	)
	return i, err
}

const updateSummary = `-- name: UpdateSummary :one
UPDATE document SET has_summary = $2 WHERE id = $1 RETURNING id, username, is_private, has_summary, file_name, created_at
`

type UpdateSummaryParams struct {
	ID         int64 `json:"id"`
	HasSummary bool  `json:"has_summary"`
}

func (q *Queries) UpdateSummary(ctx context.Context, arg UpdateSummaryParams) (Document, error) {
	row := q.db.QueryRowContext(ctx, updateSummary, arg.ID, arg.HasSummary)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.IsPrivate,
		&i.HasSummary,
		&i.FileName,
		&i.CreatedAt,
	)
	return i, err
}
