// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type UserActivity string

const (
	UserActivityUploaded         UserActivity = "uploaded"
	UserActivityGeneratedSummary UserActivity = "generated_summary"
	UserActivityDeleted          UserActivity = "deleted"
	UserActivityChangeSummary    UserActivity = "change_summary"
	UserActivityDownloaded       UserActivity = "downloaded"
)

func (e *UserActivity) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserActivity(s)
	case string:
		*e = UserActivity(s)
	default:
		return fmt.Errorf("unsupported scan type for UserActivity: %T", src)
	}
	return nil
}

type NullUserActivity struct {
	UserActivity UserActivity `json:"user_activity"`
	Valid        bool         `json:"valid"` // Valid is true if UserActivity is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserActivity) Scan(value interface{}) error {
	if value == nil {
		ns.UserActivity, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserActivity.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserActivity) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserActivity), nil
}

type Activity struct {
	ID         int64     `json:"id"`
	Username   string    `json:"username"`
	Activity   int64     `json:"activity"`
	CreatedAt  time.Time `json:"created_at"`
	DocumentID int64     `json:"document_id"`
}

type Document struct {
	ID         int64     `json:"id"`
	Username   string    `json:"username"`
	IsPrivate  bool      `json:"is_private"`
	HasSummary bool      `json:"has_summary"`
	FileName   string    `json:"file_name"`
	CreatedAt  time.Time `json:"created_at"`
}

type Session struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiresAt    time.Time `json:"expires_at"`
	CreatedAt    time.Time `json:"created_at"`
}

type Summary struct {
	ID      int64  `json:"id"`
	DocID   int64  `json:"doc_id"`
	Param1  bool   `json:"param1"`
	Param2  bool   `json:"param2"`
	Summary []byte `json:"summary"`
}

type User struct {
	Username       string    `json:"username"`
	HashedPassword string    `json:"hashed_password"`
	FullName       string    `json:"full_name"`
	Email          string    `json:"email"`
	CreatedAt      time.Time `json:"created_at"`
}
